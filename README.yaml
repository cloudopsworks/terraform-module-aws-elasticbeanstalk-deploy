name: Terraform Elastic Beanstalk Application Deployment Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: terraform-module-aws-elasticbeanstalk-deploy

description: |-
  Deployment module for Elastic Beanstalk applications through the [Base Application Module](https://github.com/cloudopsworks/base-app-template.git). This module provides comprehensive configuration options for AWS Elastic Beanstalk deployments including load balancer setup, instance configurations, networking, DNS management, monitoring and alarms integration.

# Introduction to the project
introduction: |-
  This Terraform module simplifies AWS Elastic Beanstalk application deployments by providing:
  
  - Multiple platform support (Java 8/11/17, Node.js 12/14/16/18, Go, Docker)
  - Flexible load balancer configuration with shared LB support
  - DNS management with Route53 integration
  - CloudWatch alarms integration
  - API Gateway VPC Link support
  - Spot instance support for cost optimization
  - Custom health checks and SSL configuration
  - Comprehensive tag management

# How to use this project
usage: |-
  File Format recommended for inputs:
  ```yaml
  environment: "dev|uat|prod|demo"
  runner_set: "RUNNER-ENV"
  versions_bucket: "VERSIONS_BUCKET"
  #logs_bucket: "LOGS_BUCKET"
  #node_extra_env:
  dns:
    enabled: true
    private_zone: false
    domain_name: DOMAIN_NAME
    alias_prefix: ALIAS_PREFIX
  alarms:
    enabled: false
    threshold: 15
    period: 120
    evaluation_periods: 2
    destination_topic: DESTINATION_SNS
  api_gateway:
    enabled: false
    vpc_link:
      #link_name: VPC_LINK_NAME # Optional: only valid when existing link is NOT used
      use_existing: false
      #lb_name: LOAD_BALANCER_NAME
      #listener_port: 8443
      #to_port: 443
      #health: # Enable this and below to change the type of healthcheck
      #  enabled: true
      #  protocol: HTTPS
      #  http_status: "200-401"
      #  path: "/"
  beanstalk:
    # Solution stack is one of:
    #   java      = "^64bit Amazon Linux 2 (.*) Corretto 8(.*)$"
    #   java11    = "^64bit Amazon Linux 2 (.*) Corretto 11(.*)$"
    #   java17    = "^64bit Amazon Linux 2 (.*) Corretto 17(.*)$"
    #   node      = "^64bit Amazon Linux 2 (.*) Node.js 12(.*)$"
    #   node14    = "^64bit Amazon Linux 2 (.*) Node.js 14(.*)$"
    #   node16    = "^64bit Amazon Linux 2 (.*) Node.js 16 AL2 (.*)$"
    #   node18    = "^64bit Amazon Linux 2 (.*) Node.js 18 AL2 (.*)$"
    #   go        = "^64bit Amazon Linux 2 (.*) Go (.*)$"
    #   docker    = "^64bit Amazon Linux 2 (.*) Docker (.*)$"
    #   docker-m  = "^64bit Amazon Linux 2 (.*) Multi-container Docker (.*)$"
    #   java-amz1 = "^64bit Amazon Linux (.*)$ running Java 8(.*)$"
    #   node-amz1 = "^64bit Amazon Linux (.*)$ running Node.js(.*)$"
    # Can specify complete name for certain environments to Stick the stack to a specific version.
    solution_stack: SOLUTION_STACK
    application: APPLICATION
    iam:
      instance_profile: INSTANCE_PROFILE
      service_role: SERVICE_ROLE
    load_balancer:
      # Shared Load Balancer configuration subset
      #shared:
      #  dns:
      #    enabled: false
      #  enabled: false
      #  name: SHARED_LB_NAME
      #  weight: 100
      public: true
      ssl_certificate_id: SSL_CERTIFICATE_ID
      ssl_policy: ELBSecurityPolicy-2016-08
      alias: LOAD_BALANCER_ALIAS
    instance:
      instance_port: 8080
      enable_spot: true
      default_retention: 90
      volume_size: 20
      volume_type: gp2
      ec2_key: EC2_KEY
      ami_id: AMI_ID
      server_types:
        - SERVER TYPE1
        - SERVER TYPE2
      #pool: # Instance Pool elasticity minimum & maximum number of instances
      #  min: 1
      #  max: 1
    networking:
      private_subnets: []
      #      - SUBNET_ID
      #      - SUBNET_ID2
      public_subnets: []
      #      - SUBNET_ID3
      #      - SUBNET_ID4
      vpc_id: VPC_ID
    ##
    # Optional variable for mapping ports to backend ports:
    port_mappings: []
    #    - name: default
    #      from_port: 80
    #      to_port: 8081
    #      protocol: HTTP
    #    - name: port443
    #      from_port: 443
    #      to_port: 8443
    #      protocol: HTTPS
    #      backend_protocol: HTTPS
    #      health_check: # for custom target group
    #        enabled: true
    #        protocol: HTTPS
    #        port: 8443 | traffic-port
    #        matcher: "200-302"
    #        path: "/"
    #        unhealthy_threshold: 2
    #        healthy_threshold: 2
    #        timeout: 5
    #        interval: 30
    #      # Rules are required if custom_shared_rules=false or not set
    #      rules:
    #        - RULENAME
  
    ##
    # Optional variable for adding extra tags to the environment
    extra_tags: {}
    #    key: value
    #    key2: value2
    extra_settings: []
    #    - name: SETTING_NAME
    #      namespace: aws:NAMESPACE
    #      resource: ""
    #      value: "<VALUE>"
    #    - name: SETTING_NAME_2
    #      namespace: aws:NAMESPACE_2
    #      resource: ""
    #      value: "<VALUE>"
    ##
    # Enable custom shared Rules where below rule mappings mandate over elastic beanstalk configuration.
    #custom_shared_rules: true
    ##
    # Optional Variable for mapping rules for shared Load Balancer
    rule_mappings: []
  #    - name: RULENAME
  #      process: port_mapping_process
  #      host: host.address.com,host.address2.com
  #      path: /path
  #      priority: 100
  #      path_patterns:
  #        - /path
  #      query_strings:
  #        - query1=value1
  #        - query2=value2
  #      http_headers:
  #        - name: HEADERNAME
  #          values: ["value1", "valuepattern*"]
  #      source_ips:
  #        - IP1
  #        - IP2
  tags: {}
  # TAG1: value1
  # TAG2: value2
  ```
# Example usage
examples: |-
  ## Basic Terragrunt Configuration
  ```hcl
  include "root" {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-elasticbeanstalk-deploy.git?ref=v1.0.0"
  }

  inputs = {
    environment = "dev"
    runner_set = "dev-runner"
    versions_bucket = "my-versions-bucket"
  
    dns = {
      enabled = true
      private_zone = false
      domain_name = "example.com"
      alias_prefix = "myapp"
    }
  
    beanstalk = {
      solution_stack = "^64bit Amazon Linux 2 (.*) Node.js 18 AL2 (.*)$"
      application = "myapp"
  
      load_balancer = {
        public = true
        ssl_certificate_id = "arn:aws:acm:region:account:certificate/certificate-id"
      }
  
      instance = {
        instance_port = 8080
        enable_spot = true
        server_types = ["t3.micro", "t3.small"]
      }
  
      networking = {
        vpc_id = "vpc-12345"
        private_subnets = ["subnet-1", "subnet-2"]
      }
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Create a new Terragrunt configuration file (terragrunt.hcl)
  2. Configure the module source and version:
     ```hcl
     terraform {
       source = "git::https://github.com/cloudopsworks/terraform-module-aws-elasticbeanstalk-deploy.git?ref=v1.0.0"
     }
     ```
  3. Set required variables:
     - environment
     - runner_set
     - versions_bucket
     - beanstalk configuration (solution_stack, application, networking)
  4. Initialize Terragrunt:
     ```bash
     terragrunt init
     ```
  5. Review the plan:
     ```bash
     terragrunt plan
     ```
  6. Apply the configuration:
     ```bash
     terragrunt apply
     ```

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"